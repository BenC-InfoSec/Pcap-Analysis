"""
Description: Quickly check a pcap for ip address country geolocation. Prints out a list and produces a bar graph.

Requirements: Geolocation database file available at https://www.maxmind.com/en/home. A pcap file.

To use: Change Geolocation database to your database file. Change yourpcap.pcap to your pcap file.

Note: Works in Jupyter Notebook
"""


from scapy.all import IP, rdpcap
from geoip2.database import Reader
import ipaddress
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Function to check if an IP address is private / loopback
def is_private_ip(ip_address):
    private_ip_ranges = [
        ipaddress.ip_network('10.0.0.0/8'),
        ipaddress.ip_network('172.16.0.0/12'),
        ipaddress.ip_network('192.168.0.0/16'),
        ipaddress.ip_network('127.0.0.0/8'),
    ]
    
    for ip_range in private_ip_ranges:
        if ip_address in ip_range:
            return True
    return False

# Load the GeoLite2-City.mmdb database
geoip_reader = Reader('GeoLite2-City.mmdb')  # *** Replace with the path to your database file ***

# Load a PCAP file
pcap_file = 'yourpcap.pcap'  # *** Replace with the path to your PCAP file ***
packets = rdpcap(pcap_file)

# Create a set to store unique public IP addresses
public_ip_addresses = set()

# Iterate through packets and extract unique public IP addresses
for packet in packets:
    if IP in packet:
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        src_ip_address = ipaddress.ip_address(src_ip)
        dst_ip_address = ipaddress.ip_address(dst_ip)
        
        # Check if the source and destination IPs are not private / loopback
        if not is_private_ip(src_ip_address):
            public_ip_addresses.add(src_ip)
        if not is_private_ip(dst_ip_address):
            public_ip_addresses.add(dst_ip)

# Create a dictionary to store country-count pairs
country_count = {}

# Iterate through public IP addresses and get their geolocations
for ip_address in public_ip_addresses:
    try:
        response = geoip_reader.city(ip_address)
        country_name = response.country.name
        
        # Check if the country name is valid (not empty or None)
        if country_name and country_name != 'None':
            # Update the country-count dictionary
            if country_name in country_count:
                country_count[country_name] += 1
            else:
                country_count[country_name] = 1
    except Exception as e:
        print(f'IP: {ip_address}, Error: {e}')

# Close the GeoLite2 database reader
geoip_reader.close()

# Print the dictionary of country-count pairs
for country, count in country_count.items():
    print(f'Country: {country}, Count: {count}')
    
df = pd.DataFrame(list(country_count.items()), columns=['Country', 'Count'])

# Sort the DataFrame by count in descending order
df = df.sort_values(by='Count', ascending=False)

#bar chart
plt.figure(figsize=(12, 6))
sns.barplot(x='Country', y='Count', data=df, palette='rocket_r')
plt.title('Public IP Addresses Countries')
plt.xlabel('Country')
plt.ylabel('Count')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.show()
